## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode

r = p * q:
    { Inv: r = p_0 * q + p_1 * q + ... + p_(i-1) * q, where p_i is the ith term in p }
    foreach term, t_p, in p:
        { Inv: r = p_0 * q + p_1 * q + ... + p_i * (q_0 + q_1 + ... + q_(j-1)),
          where q_j is the jth term in q }
        foreach term, t_q, in q:
            insert the product of t_p and t_q into r as a new term

2. Division Pseudocode

r = p / q:
    set pCopy = p by making a term-by-term copy of all terms in p to pCopy
    { Inv: r = pCopy_0 / q_0 + pCopy_1 / q_1 + ... + pCopy_(i-1) / q_(i-1), where pCopy_i is the term with
      max degree in pCopy on ith iteration and q_i is the term with max degree in q on ith iteration }
    while pCopy is not empty and max degree of term in pCopy, pCopy_i, is >= max degree of term in q, q_i:
        set quotientTerm = pCopy_i / q_i
        insert quotientTerm into r as a new term
        { Inv: pCopy = pCopy_pre - (q_0 * quotientTerm + q_1 * quotientTerm + ... + q_(j-1) * quotientTerm),
          where q_j is the jth term in q and pCopy_pre is the value of pCopy before this loop }
        foreach term, t_q, in q:
            set productTerm = t_q * quotientTerm
            if any term, t_pCopy, in pCopy has the same degree as productTerm,
                then replace t_pCopy in pCopy with the difference of t_pCopy and productTerm
                else insert the difference of 0 and productTerm in pCopy as a new term

3. Division Example: (x3+x-1) / (x+1) = x2-x+2

p = (x^3 + x - 1)
q = (x + 1)
r = 0
pCopy = (x^3 + x - 1)
while pCopy is not empty and max degree of term in pCopy, pCopy_i, is >= max degree of term in q, q_i
    Iteration 1: pCopy_i = x^3, q_i = x, r = 0, pCopy = (x^3 + x - 1), p = (x^3 + x - 1), q = (x + 1)
        [set quotientTerm = pCopy_i / q_i] quotientTerm = x^2
        [insert quotientTerm into r as a new term] r = (x^2)
        foreach term, t_q, in q
            Iteration 1: t_q = x, quotientTerm = x^2, pCopy_i = x^3, q_i = x, r = (x^2), pCopy = (x^3 + x - 1), p = (x^3 + x - 1), q = (x + 1)
                [set productTerm = t_q * quotientTerm] productTerm = x^3
                [if any term, t_pCopy, in pCopy has the same degree as productTerm] YES, t_pCopy = x^3
                [then replace t_pCopy in pCopy with the difference of t_pCopy and productTerm] t_pCopy - productTerm = 0, so now pCopy = (x - 1)
                [else insert the difference of 0 and productTerm in pCopy as a new term]
            Iteration 2: t_q = 1, quotientTerm = x^2, pCopy_i = x^3, q_i = x, r = (x^2), pCopy = (x - 1), p = (x^3 + x - 1), q = (x + 1)
                [set productTerm = t_q * quotientTerm] productTerm = x^2
                [if any term, t_pCopy, in pCopy has the same degree as productTerm] NO
                [then replace t_pCopy in pCopy with the difference of t_pCopy and productTerm]
                [else insert the difference of 0 and productTerm in pCopy as a new term] 0 - productTerm = -x^2 so now pCopy = (-x^2 + x - 1)
    Iteration 2: pCopy_i = -x^2, q_i = x, r = (x^2), pCopy = (-x^2 + x - 1), p = (x^3 + x - 1), q = (x + 1)
            [set quotientTerm = pCopy_i / q_i] quotientTerm = -x
            [insert quotientTerm into r as a new term] r = (x^2 - x)
            foreach term, t_q, in q
                Iteration 1: t_q = x, quotientTerm = -x, pCopy_i = -x^2, q_i = x, r = (x^2 - x), pCopy = (-x^2 + x - 1), p = (x^3 + x - 1), q = (x + 1)
                    [set productTerm = t_q * quotientTerm] productTerm = -x^2
                    [if any term, t_pCopy, in pCopy has the same degree as productTerm] YES, t_pCopy = -x^2
                    [then replace t_pCopy in pCopy with the difference of t_pCopy and productTerm] t_pCopy - productTerm = 0, so now pCopy = (x - 1)
                    [else insert the difference of 0 and productTerm in pCopy as a new term]
                Iteration 2: t_q = 1, quotientTerm = -x, pCopy_i = -x^2, q_i = x, r = (x^2 - x), pCopy = (x - 1), p = (x^3 + x - 1), q = (x + 1)
                    [set productTerm = t_q * quotientTerm] productTerm = -x
                    [if any term, t_pCopy, in pCopy has the same degree as productTerm] NO
                    [then replace t_pCopy in pCopy with the difference of t_pCopy and productTerm]
                    [else insert the difference of 0 and productTerm in pCopy as a new term] 0 - productTerm = x so now pCopy = (2x - 1)
    Iteration 3: pCopy_i = 2x, q_i = x, r = (x^2 - x), pCopy = (2x - 1), p = (x^3 + x - 1), q = (x + 1)
                [set quotientTerm = pCopy_i / q_i] quotientTerm = 2
                [insert quotientTerm into r as a new term] r = (x^2 - x + 2)
                foreach term, t_q, in q
                    Iteration 1: t_q = x, quotientTerm = 2, pCopy_i = 2x, q_i = x, r = (x^2 - x + 2), pCopy = (2x - 1), p = (x^3 + x - 1), q = (x + 1)
                        [set productTerm = t_q * quotientTerm] productTerm = 2x
                        [if any term, t_pCopy, in pCopy has the same degree as productTerm] YES, t_pCopy = -2x
                        [then replace t_pCopy in pCopy with the difference of t_pCopy and productTerm] t_pCopy - productTerm = 0, so now pCopy = (1)
                        [else insert the difference of 0 and productTerm in pCopy as a new term]
                    Iteration 2: t_q = 1, quotientTerm = 2, pCopy_i = 2x, q_i = x, r = (x^2 - x + 2), pCopy = (1), p = (x^3 + x - 1), q = (x + 1)
                        [set productTerm = t_q * quotientTerm] productTerm = 2
                        [if any term, t_pCopy, in pCopy has the same degree as productTerm] YES, t_pCopy = 1
                        [then replace t_pCopy in pCopy with the difference of t_pCopy and productTerm] t_pCopy - productTerm = -1, so now pCopy = (-1)
                        [else insert the difference of 0 and productTerm in pCopy as a new term]
We are done! r = (x^2 - x + 2)

## Part 1
###########################################################################

1. Weakened Rep Invariant



2. Alternate add, sub, mul, div

We lose the immutability of our class, we don't set to the reduced form as in the constructor,
and our rep may be broken since it is not getting checked.
NAN concern?


3. Constructor checkReps

Sufficient b/c our representation has not been established yet so it can't be broken


## Part 2
###########################################################################

1. Calls to checkRep in RatTerm




## Part 3
###########################################################################

1. Calls to checkRep in RatPoly



